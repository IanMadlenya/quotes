#!/bin/bash
major=$(scidb --ver | head -n 1 | sed -e "s/.* //" | cut -d '.' -f 1)
minor=$(scidb --ver | head -n 1 | sed -e "s/.* //" | cut -d '.' -f 2)
TMP='true'
if test $major -le 14 -a $minor -lt 9; then
  TMP="'TEMP'"
fi

# NBBO example workflow
# 1. Select a specific day
# 2. Select all instruments for a given tkr symbol
# 3. Select a given list of time points over the day (in milliseconds)
#
# Task: Compute previous two, current and following two NBBO values at
# the selected time points

# 1. Select a day
day="2014-10-02" 

# Convert calendar day to POSIX day value and construct between filter
pday=$(iquery -ocsv -aq "project(apply(build(<s:string>[i=1:1,1,0],'$day'),day,strpftime(s,'%Y-%m-%d','%s')),day)" | tail -n 1 | tr -d "'")
day_filter="between(opraqte,null,null,null,$pday,null, null,null,null,$pday,null)"

# 2. Select tkr
tkr="TEST"
# Build a cross_join filter expression for the instrument tkr:optid indexing
# array
tkr_filter="filter(opra_instruments, regex(instrument,'^$tkr:.*'))"
tkr_filter="cross_join($day_filter as A, $tkr_filter as B, A.instrument_id, B.instrument_id)"

# project away all but the quote attribute
filter="project($tkr_filter, quote)"

# Now we filter the main data array (opraqte) by tkr and day, and also
# integrate out the synthetic dimension. Store this into a temp array.
tmp="_temp"
iquery -naq "remove($tmp)" 2>/dev/null
iquery -naq "create_array($tmp, <quote:quote null> [exch=0:255,1,0,instrument_id=0:*,100,0,day=0:*,1,0,ms=0:86399999,600000,0], $TMP)"
# Apply filters and integrate out the synthetic dimension:
echo "Applying filters and aggregating out synthetic dimension"
time iquery -naq "
store(
  aggregate($filter, quote_best(quote) as quote, exch, instrument_id, day, ms),
$tmp)
"

# 3. Select a set of time points of interest, showing an example
# of reading some arbitrary ms time points in from a file.
echo -e "44479832\n33802969\n37466677\n44290884"  >/tmp/points
points="apply(parse(split('/tmp/points'), 'num_attributes=1','attribute_delimiter=,'),ms, int64(a0))"

# Build a strip of null quotes at these points
# we store it into a temp array because it's used several times
ms_strip="project(apply(redimension($points,<line_no:int64>[ms=0:86399999,600000,0]),quote,quote(null)), quote)"
iquery -naq "remove(_tmp2)" 2>/dev/null
iquery -naq "create_array(_tmp2, <quote:quote null>[ms=0:86399999,600000,0], $TMP)"
iquery -naq "store($ms_strip, _tmp2)"
ms_strip="_tmp2"

# Construct a plane lattice of null points by instrument_id and ms_strip
null_plane="project(cross_join(aggregate($tmp, count(*) as count, instrument_id), $ms_strip),quote)"

# Construct a lattice of null  points conformable with the data array
lattice="
project(
  cross_join(
    aggregate($tmp, count(quote), exch, day),
    $null_plane),
quote)
"
# Unfortunately, lattice is no longer conformable with $x and we need to
# redimension it. This adds some cost to the query.
lattice="redimension($lattice, <quote: quote null>[exch=0:255,1,0,instrument_id=0:*,100,0,day=0:*,1,0,ms=0:86399999,600000,0])"

# Construct the fill-in array, merging the lattice with the data
fill="merge( $tmp, $lattice )"

# Compute last-known best bid and ask prices at every time interval,
# filling in the null values introduced in step 2.
fill="cumulate($fill, last_value(quote) as quote, ms)"

# Compute the nbbo across the exchanges
nbbo="aggregate($fill, quote_best(quote) as nbbo, instrument_id, day, ms)"

# Filter on the points of interest
ans="project(cross_join($nbbo as A, $ms_strip as B, A.ms, B.ms),nbbo)"

# Run it!
time iquery -aq "op_count($ans)"
