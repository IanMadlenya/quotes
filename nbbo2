#!/bin/bash

# Some cruft to deal with inconsistent notation across SciDB releases
major=$(scidb --ver | head -n 1 | sed -e "s/.* //" | cut -d '.' -f 1)
minor=$(scidb --ver | head -n 1 | sed -e "s/.* //" | cut -d '.' -f 2)
TMP='true'
if test $major -le 14 -a $minor -lt 9; then
  TMP="'TEMP'"
fi

# This script uses kung fu from Alex's load_tools package:
iquery -aq "load_library('load_tools')"

# NBBO example workflow
# 1. Select a specific day
# 2. Select all instruments associated with a specified tkr symbol
# 3. Consider a specified list of time points over the day (in milliseconds)
#
# Task: Compute previous two and current NBBO values at the selected
#       time points.
#
# See the 'previous_two_points_example.sh' file for a basic worked out example
# in 1-d of the ideas used. (That idea is extended below to 2-d.)

# -----------------------------------------------------------------------------
# 1. Select a day in YYYY-MM-DD format
# -----------------------------------------------------------------------------
day="2014-10-02" 

# Convert calendar day to a simple integer format YYYYMMDD
pday=$(echo $day | tr -d '-')
#day_filter="between(opraqte,null,null,null,$pday,null, null,null,null,$pday,null)"
day_filter="slice(opraqte,day,$pday)"  # faster
echo "Day filter: $day_filter"

# -----------------------------------------------------------------------------
# 2. Select tkr (will show *all* option ids for that tkr)
# -----------------------------------------------------------------------------
tkr="TEST"
# Build a cross_join filter expression for the instrument tkr:optid indexing
# array
tkr_filter="filter(opra_instruments, regex(instrument,'^$tkr:.*'))"
tkr_filter="cross_join($day_filter as A, $tkr_filter as B, A.instrument_id, B.instrument_id)"
echo "tkr_filter: $tkr_filter"

# project away all but the quote attribute
filter="project($tkr_filter, quote)"

# Now we filter the main data array (opraqte) by tkr, and also
# integrate out the synthetic dimension. Store this into a temp array.
tmp="_temp"
iquery -naq "remove($tmp)" 2>/dev/null
iquery -naq "create_array($tmp, <quote:quote null> [exch=0:255,1,0,instrument_id=0:*,1,0,ms=0:86399999,86400000,0], $TMP)"
# Apply filters and integrate out the synthetic dimension:
echo "Applying filters and aggregating out synthetic dimension"
time iquery -naq "
store(
  redimension(
    aggregate($filter, quote_best(quote) as quote, exch, instrument_id, ms),
    $tmp),
$tmp)
"

# -----------------------------------------------------------------------------
# 3. Select a set of time points of interest, showing an example of reading
# some arbitrary ms time points in from a file. We store these into another
# temp array.
# -----------------------------------------------------------------------------
echo -e "44479832\n33802969\n37466677\n4000"  >/tmp/points      # (just an example)
iquery -naq "remove(_temp2)" >/dev/null 2>&1
iquery -naq "create_array(_temp2,<a0:string NULL DEFAULT null,error:string NULL DEFAULT null,ms:int64 NULL DEFAULT null> [source_instance_id=0:*,1,0,chunk_no=0:*,1,0,line_no=0:*,1000000,0], $TMP)"
iquery -naq "store(apply(parse(split('/tmp/points'), 'num_attributes=1','attribute_delimiter=,'),ms, int64(a0)), _temp2)"


# Find the previous and following two available points in the data for each specified point
points="redimension(_temp2,<count: uint64 null>[ms=0:86399999,86400000,0], count(ms) as count)"
data2="aggregate($tmp, count(*) as count, exch, instrument_id)"
seek="project(cross_join($data2 as x, $points as y), x.count)"
q="merge(project(apply($tmp, count, uint64(null)),count), $seek)"
# Apply the time coordinate to a value called 'p'
q="apply($q, p, string(ms)+',')"

q1="variable_window($q, ms, 3, 3, sum(p) as p)"
q2="cross_join($q1 as x, $points as y, x.ms, y.ms)"
q3="
apply(cross_join($q2,build(<b:bool>[i=0:6,7,0],false)),v,
  iif(i=0,int64(nth_tdv(p,0,',')), 
  iif(i=1,int64(nth_tdv(p,1,',')), 
  iif(i=2,int64(nth_tdv(p,2,',')), 
  iif(i=3,int64(nth_tdv(p,3,',')), 
  iif(i=4 and char_count(p,',')>4,int64(nth_tdv(p,4,',')), 
  iif(i=5 and char_count(p,',')>5,int64(nth_tdv(p,5,',')), 
  iif(i=6 and char_count(p,',')>6,int64(nth_tdv(p,6,',')), null))))))))"
q4="cast(
      redimension(apply($q3, quote, quote(null)),
        <quote:quote null> [exch=0:255,1,0,instrument_id=0:*,1,0,v=0:86399999,86400000,0]),
        <quote:quote null> [exch=0:255,1,0,instrument_id=0:*,1,0,ms=0:86399999,86400000,0])"

fill="project(join(merge($tmp,$q4) as x, $q4 as y), x.quote)"
fill="cumulate($fill, last_value(quote) as quote, ms)"

# Compute the nbbo across the exchanges
nbbo="aggregate($fill, quote_best(quote) as nbbo, instrument_id, ms)"

# Run this example, counting the lines of output
time iquery -aq "op_count($nbbo)"
